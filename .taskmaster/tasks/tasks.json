{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Next.js Project with TypeScript and Tailwind CSS",
        "description": "Set up the foundational Next.js 14+ project with App Router, TypeScript configuration, and Tailwind CSS integration. Configure the project structure and essential dependencies.",
        "details": "```bash\n# Create Next.js project\nnpx create-next-app@latest abrazo-west-trauma --typescript --tailwind --app --no-src-dir\n\n# Install additional dependencies\nnpm install @supabase/supabase-js @supabase/auth-helpers-nextjs\nnpm install --save-dev @types/node\n\n# Project structure:\n/\n├── app/\n│   ├── layout.tsx\n│   ├── page.tsx\n│   ├── globals.css\n│   └── admin/\n│       └── page.tsx\n├── components/\n├── lib/\n│   └── supabase.ts\n├── public/\n├── .env.local\n├── next.config.js\n├── tailwind.config.ts\n└── tsconfig.json\n```\n\nConfigure tailwind.config.ts with medical color palette:\n```typescript\nmodule.exports = {\n  content: ['./app/**/*.{js,ts,jsx,tsx}', './components/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {\n      colors: {\n        primary: '#0066CC',\n        secondary: '#FFFFFF',\n        neutral: {\n          light: '#F5F5F5',\n          dark: '#333333'\n        }\n      }\n    }\n  }\n}\n```",
        "testStrategy": "Verify project runs with `npm run dev`, TypeScript compiles without errors, and Tailwind CSS classes apply correctly. Test that the App Router structure is working by navigating to / and /admin routes.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Configure Supabase Database and Storage",
        "description": "Set up Supabase project, create the files table schema, configure storage bucket for document uploads, and establish connection utilities.",
        "details": "1. Create Supabase project at supabase.com\n\n2. Execute SQL to create files table:\n```sql\nCREATE TYPE file_category AS ENUM ('resident_guidelines', 'cpgs', 'trauma_policies', 'resources');\n\nCREATE TABLE files (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  title TEXT NOT NULL,\n  description TEXT,\n  file_url TEXT NOT NULL,\n  category file_category NOT NULL\n);\n\n-- Enable RLS\nALTER TABLE files ENABLE ROW LEVEL SECURITY;\n\n-- Public read policy\nCREATE POLICY \"Public files are viewable by everyone\" ON files\n  FOR SELECT USING (true);\n\n-- Admin write policy (implement auth later)\nCREATE POLICY \"Admins can insert files\" ON files\n  FOR INSERT WITH CHECK (true);\n```\n\n3. Create storage bucket:\n```sql\nINSERT INTO storage.buckets (id, name, public)\nVALUES ('guidelines', 'guidelines', true);\n```\n\n4. Create lib/supabase.ts:\n```typescript\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport type FileCategory = 'resident_guidelines' | 'cpgs' | 'trauma_policies' | 'resources'\n\nexport interface FileRecord {\n  id: string\n  created_at: string\n  title: string\n  description?: string\n  file_url: string\n  category: FileCategory\n}\n```",
        "testStrategy": "Test database connection by running a simple query. Verify storage bucket is accessible. Test RLS policies by attempting read/write operations. Ensure TypeScript types match database schema.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Create Core UI Components",
        "description": "Build reusable React components including Header, Footer, and FileCard components with Tailwind CSS styling following the medical design system.",
        "details": "1. Create components/Header.tsx:\n```typescript\nexport default function Header() {\n  return (\n    <header className=\"bg-primary text-white py-6 px-4\">\n      <div className=\"container mx-auto max-w-6xl\">\n        <h1 className=\"text-2xl md:text-3xl font-bold\">Abrazo West Campus</h1>\n        <p className=\"text-lg mt-2\">Level 1 Trauma Center Resources</p>\n      </div>\n    </header>\n  )\n}\n```\n\n2. Create components/Footer.tsx:\n```typescript\nexport default function Footer() {\n  return (\n    <footer className=\"bg-neutral-dark text-white py-6 px-4 mt-auto\">\n      <div className=\"container mx-auto max-w-6xl text-center\">\n        <p>&copy; {new Date().getFullYear()} Abrazo West Campus. All rights reserved.</p>\n      </div>\n    </footer>\n  )\n}\n```\n\n3. Create components/FileCard.tsx:\n```typescript\nimport { FileRecord } from '@/lib/supabase'\n\ninterface FileCardProps {\n  file: FileRecord\n}\n\nexport default function FileCard({ file }: FileCardProps) {\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  return (\n    <a\n      href={file.file_url}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"block p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow border border-neutral-light\"\n    >\n      <h3 className=\"text-lg font-semibold text-neutral-dark mb-2\">{file.title}</h3>\n      {file.description && (\n        <p className=\"text-sm text-gray-600 mb-2\">{file.description}</p>\n      )}\n      <div className=\"flex justify-between items-center text-xs text-gray-500\">\n        <span>PDF</span>\n        <span>{formatDate(file.created_at)}</span>\n      </div>\n    </a>\n  )\n}\n```",
        "testStrategy": "Create a test page that imports and renders all components. Verify responsive behavior on mobile/tablet/desktop. Test FileCard with mock data. Ensure all Tailwind classes compile correctly.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Homepage with Data Fetching",
        "description": "Create the main homepage that fetches and displays files from Supabase, organized by category with server-side rendering for optimal performance.",
        "details": "Update app/page.tsx:\n```typescript\nimport { supabase, FileCategory, FileRecord } from '@/lib/supabase'\nimport FileCard from '@/components/FileCard'\n\ninterface CategorySection {\n  title: string\n  category: FileCategory\n  files: FileRecord[]\n}\n\nasync function getFiles() {\n  const { data, error } = await supabase\n    .from('files')\n    .select('*')\n    .order('created_at', { ascending: false })\n\n  if (error) {\n    console.error('Error fetching files:', error)\n    return []\n  }\n\n  return data as FileRecord[]\n}\n\nexport default async function HomePage() {\n  const files = await getFiles()\n\n  const categories: CategorySection[] = [\n    {\n      title: 'Resident Guidelines',\n      category: 'resident_guidelines',\n      files: files.filter(f => f.category === 'resident_guidelines')\n    },\n    {\n      title: 'Clinical Practice Guidelines',\n      category: 'cpgs',\n      files: files.filter(f => f.category === 'cpgs')\n    },\n    {\n      title: 'Trauma Policies',\n      category: 'trauma_policies',\n      files: files.filter(f => f.category === 'trauma_policies')\n    },\n    {\n      title: 'Useful Links & Resources',\n      category: 'resources',\n      files: files.filter(f => f.category === 'resources')\n    }\n  ]\n\n  return (\n    <main className=\"container mx-auto max-w-6xl px-4 py-8\">\n      {categories.map((section) => (\n        <section key={section.category} className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-neutral-dark mb-6\">\n            {section.title}\n          </h2>\n          {section.files.length > 0 ? (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {section.files.map((file) => (\n                <FileCard key={file.id} file={file} />\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-gray-500 italic\">No files available in this category.</p>\n          )}\n        </section>\n      ))}\n    </main>\n  )\n}\n```\n\nAdd loading state in app/loading.tsx:\n```typescript\nexport default function Loading() {\n  return (\n    <div className=\"container mx-auto max-w-6xl px-4 py-8\">\n      <div className=\"animate-pulse\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"mb-12\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-6\"></div>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {[1, 2, 3].map((j) => (\n                <div key={j} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n```",
        "testStrategy": "Test with empty database, then add sample files to each category. Verify server-side rendering works. Test error handling by temporarily breaking database connection. Ensure responsive grid layout works on all devices.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Build Admin Authentication System",
        "description": "Implement a simple password-based authentication system for the admin portal using environment variables and cookies for session management.",
        "details": "1. Install dependencies:\n```bash\nnpm install js-cookie\nnpm install --save-dev @types/js-cookie\n```\n\n2. Create app/api/auth/route.ts:\n```typescript\nimport { NextRequest, NextResponse } from 'next/server'\n\nconst ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'changeme'\n\nexport async function POST(request: NextRequest) {\n  const { password } = await request.json()\n\n  if (password === ADMIN_PASSWORD) {\n    const response = NextResponse.json({ success: true })\n    response.cookies.set('admin-auth', 'true', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 60 * 60 * 24 // 24 hours\n    })\n    return response\n  }\n\n  return NextResponse.json({ success: false }, { status: 401 })\n}\n```\n\n3. Create middleware.ts:\n```typescript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/admin')) {\n    const authCookie = request.cookies.get('admin-auth')\n    \n    if (!authCookie || authCookie.value !== 'true') {\n      return NextResponse.redirect(new URL('/login', request.url))\n    }\n  }\n\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: '/admin/:path*'\n}\n```\n\n4. Create app/login/page.tsx:\n```typescript\n'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\n\nexport default function LoginPage() {\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    const response = await fetch('/api/auth', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ password })\n    })\n\n    if (response.ok) {\n      router.push('/admin')\n    } else {\n      setError('Invalid password')\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-neutral-light\">\n      <form onSubmit={handleSubmit} className=\"bg-white p-8 rounded-lg shadow-md w-full max-w-md\">\n        <h1 className=\"text-2xl font-bold mb-6\">Admin Login</h1>\n        {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder=\"Enter admin password\"\n          className=\"w-full p-3 border rounded mb-4\"\n          required\n        />\n        <button\n          type=\"submit\"\n          className=\"w-full bg-primary text-white py-3 rounded hover:bg-blue-700 transition\"\n        >\n          Login\n        </button>\n      </form>\n    </div>\n  )\n}\n```",
        "testStrategy": "Test login with correct and incorrect passwords. Verify cookie is set properly. Test middleware redirects for unauthorized access. Ensure logout functionality clears the cookie. Test session persistence across page refreshes.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create Admin Upload Interface",
        "description": "Build the admin page UI with a file upload form including drag-and-drop functionality, category selection, and form validation.",
        "details": "Create app/admin/page.tsx:\n```typescript\n'use client'\n\nimport { useState, useRef } from 'react'\nimport { FileCategory } from '@/lib/supabase'\n\nexport default function AdminPage() {\n  const [file, setFile] = useState<File | null>(null)\n  const [title, setTitle] = useState('')\n  const [description, setDescription] = useState('')\n  const [category, setCategory] = useState<FileCategory>('resident_guidelines')\n  const [uploading, setUploading] = useState(false)\n  const [message, setMessage] = useState({ type: '', text: '' })\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault()\n    const droppedFile = e.dataTransfer.files[0]\n    if (droppedFile && droppedFile.type === 'application/pdf') {\n      setFile(droppedFile)\n    } else {\n      setMessage({ type: 'error', text: 'Please upload a PDF file' })\n    }\n  }\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0]\n    if (selectedFile && selectedFile.type === 'application/pdf') {\n      setFile(selectedFile)\n    } else {\n      setMessage({ type: 'error', text: 'Please upload a PDF file' })\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!file || !title) {\n      setMessage({ type: 'error', text: 'Please fill in all required fields' })\n      return\n    }\n\n    setUploading(true)\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('title', title)\n    formData.append('description', description)\n    formData.append('category', category)\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      if (response.ok) {\n        setMessage({ type: 'success', text: 'File uploaded successfully!' })\n        // Reset form\n        setFile(null)\n        setTitle('')\n        setDescription('')\n        if (fileInputRef.current) fileInputRef.current.value = ''\n      } else {\n        throw new Error('Upload failed')\n      }\n    } catch (error) {\n      setMessage({ type: 'error', text: 'Upload failed. Please try again.' })\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <main className=\"container mx-auto max-w-2xl px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Admin Upload Portal</h1>\n      \n      {message.text && (\n        <div className={`p-4 rounded mb-6 ${\n          message.type === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'\n        }`}>\n          {message.text}\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded-lg shadow-md\">\n        <div\n          onDrop={handleDrop}\n          onDragOver={(e) => e.preventDefault()}\n          className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center mb-6 hover:border-primary transition\"\n        >\n          {file ? (\n            <p className=\"text-green-600\">Selected: {file.name}</p>\n          ) : (\n            <>\n              <p className=\"mb-2\">Drag and drop a PDF file here, or</p>\n              <button\n                type=\"button\"\n                onClick={() => fileInputRef.current?.click()}\n                className=\"text-primary hover:underline\"\n              >\n                browse files\n              </button>\n            </>\n          )}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\".pdf\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium mb-2\">Title *</label>\n          <input\n            type=\"text\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            className=\"w-full p-3 border rounded\"\n            required\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium mb-2\">Description</label>\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            className=\"w-full p-3 border rounded\"\n            rows={3}\n          />\n        </div>\n\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium mb-2\">Category *</label>\n          <select\n            value={category}\n            onChange={(e) => setCategory(e.target.value as FileCategory)}\n            className=\"w-full p-3 border rounded\"\n          >\n            <option value=\"resident_guidelines\">Resident Guidelines</option>\n            <option value=\"cpgs\">Clinical Practice Guidelines</option>\n            <option value=\"trauma_policies\">Trauma Policies</option>\n            <option value=\"resources\">Useful Links & Resources</option>\n          </select>\n        </div>\n\n        <button\n          type=\"submit\"\n          disabled={uploading}\n          className=\"w-full bg-primary text-white py-3 rounded hover:bg-blue-700 transition disabled:opacity-50\"\n        >\n          {uploading ? 'Uploading...' : 'Upload File'}\n        </button>\n      </form>\n    </main>\n  )\n}\n```",
        "testStrategy": "Test drag-and-drop with PDF and non-PDF files. Verify form validation for required fields. Test file size limits. Ensure UI feedback is clear for all states. Test on mobile devices for touch interactions.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement File Upload Server Action",
        "description": "Create the server-side API endpoint to handle file uploads to Supabase Storage and database record creation with proper validation and error handling.",
        "details": "Create app/api/upload/route.ts:\n```typescript\nimport { NextRequest, NextResponse } from 'next/server'\nimport { supabase } from '@/lib/supabase'\nimport { v4 as uuidv4 } from 'uuid'\n\n// Install uuid: npm install uuid @types/uuid\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Check authentication\n    const authCookie = request.cookies.get('admin-auth')\n    if (!authCookie || authCookie.value !== 'true') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n    const title = formData.get('title') as string\n    const description = formData.get('description') as string\n    const category = formData.get('category') as string\n\n    // Validate inputs\n    if (!file || !title || !category) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      )\n    }\n\n    // Validate file type\n    if (file.type !== 'application/pdf') {\n      return NextResponse.json(\n        { error: 'Only PDF files are allowed' },\n        { status: 400 }\n      )\n    }\n\n    // Validate file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      return NextResponse.json(\n        { error: 'File size must be less than 10MB' },\n        { status: 400 }\n      )\n    }\n\n    // Generate unique filename\n    const fileExt = file.name.split('.').pop()\n    const fileName = `${uuidv4()}.${fileExt}`\n    const filePath = `${category}/${fileName}`\n\n    // Convert File to ArrayBuffer then to Uint8Array\n    const arrayBuffer = await file.arrayBuffer()\n    const fileData = new Uint8Array(arrayBuffer)\n\n    // Upload to Supabase Storage\n    const { data: uploadData, error: uploadError } = await supabase.storage\n      .from('guidelines')\n      .upload(filePath, fileData, {\n        contentType: file.type,\n        cacheControl: '3600'\n      })\n\n    if (uploadError) {\n      console.error('Upload error:', uploadError)\n      return NextResponse.json(\n        { error: 'Failed to upload file' },\n        { status: 500 }\n      )\n    }\n\n    // Get public URL\n    const { data: { publicUrl } } = supabase.storage\n      .from('guidelines')\n      .getPublicUrl(filePath)\n\n    // Create database record\n    const { data: dbData, error: dbError } = await supabase\n      .from('files')\n      .insert({\n        title,\n        description: description || null,\n        file_url: publicUrl,\n        category\n      })\n      .select()\n      .single()\n\n    if (dbError) {\n      // Rollback: delete uploaded file\n      await supabase.storage.from('guidelines').remove([filePath])\n      console.error('Database error:', dbError)\n      return NextResponse.json(\n        { error: 'Failed to save file record' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({\n      success: true,\n      file: dbData\n    })\n\n  } catch (error) {\n    console.error('Upload error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n```\n\nUpdate next.config.js for larger body size:\n```javascript\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    serverActions: {\n      bodySizeLimit: '10mb'\n    }\n  }\n}\n\nmodule.exports = nextConfig\n```",
        "testStrategy": "Test file upload with various file sizes and types. Verify database record creation matches uploaded file. Test error scenarios: network failure, storage quota, invalid data. Ensure rollback works if database insert fails.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Add Loading States and Error Handling",
        "description": "Implement comprehensive loading states, error boundaries, and user feedback mechanisms throughout the application for better UX.",
        "details": "1. Create app/error.tsx for global error handling:\n```typescript\n'use client'\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    console.error(error)\n  }, [error])\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-red-600 mb-4\">\n          Something went wrong!\n        </h2>\n        <p className=\"text-gray-600 mb-6\">\n          We're sorry for the inconvenience. Please try again.\n        </p>\n        <button\n          onClick={reset}\n          className=\"bg-primary text-white px-6 py-3 rounded hover:bg-blue-700 transition\"\n        >\n          Try again\n        </button>\n      </div>\n    </div>\n  )\n}\n```\n\n2. Create components/SkeletonCard.tsx:\n```typescript\nexport default function SkeletonCard() {\n  return (\n    <div className=\"animate-pulse\">\n      <div className=\"bg-white rounded-lg shadow-md border border-neutral-light p-4\">\n        <div className=\"h-6 bg-gray-200 rounded mb-3 w-3/4\"></div>\n        <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n        <div className=\"h-4 bg-gray-200 rounded mb-4 w-5/6\"></div>\n        <div className=\"flex justify-between\">\n          <div className=\"h-3 bg-gray-200 rounded w-12\"></div>\n          <div className=\"h-3 bg-gray-200 rounded w-20\"></div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n3. Create lib/utils.ts for error handling utilities:\n```typescript\nexport class AppError extends Error {\n  constructor(\n    message: string,\n    public statusCode: number = 500,\n    public isOperational: boolean = true\n  ) {\n    super(message)\n    Object.setPrototypeOf(this, AppError.prototype)\n  }\n}\n\nexport function handleError(error: unknown): string {\n  if (error instanceof AppError) {\n    return error.message\n  }\n  \n  if (error instanceof Error) {\n    return error.message\n  }\n  \n  return 'An unexpected error occurred'\n}\n\nexport async function withErrorHandling<T>(\n  fn: () => Promise<T>,\n  fallback: T\n): Promise<T> {\n  try {\n    return await fn()\n  } catch (error) {\n    console.error('Error in withErrorHandling:', error)\n    return fallback\n  }\n}\n```\n\n4. Update components with loading states:\n```typescript\n// Add to FileCard.tsx\nexport function FileCardSkeleton() {\n  return <SkeletonCard />\n}\n\n// Create components/ErrorMessage.tsx\ninterface ErrorMessageProps {\n  message: string\n  onRetry?: () => void\n}\n\nexport default function ErrorMessage({ message, onRetry }: ErrorMessageProps) {\n  return (\n    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n      <p className=\"text-red-700\">{message}</p>\n      {onRetry && (\n        <button\n          onClick={onRetry}\n          className=\"mt-2 text-sm text-red-600 hover:underline\"\n        >\n          Try again\n        </button>\n      )}\n    </div>\n  )\n}\n```",
        "testStrategy": "Test error boundary by throwing errors in components. Verify loading states appear during data fetching. Test network failure scenarios. Ensure error messages are user-friendly. Test retry mechanisms work correctly.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Optimize Performance and Accessibility",
        "description": "Implement performance optimizations including image optimization, lazy loading, caching strategies, and ensure WCAG 2.1 AA compliance throughout the application.",
        "details": "1. Add metadata and SEO optimization in app/layout.tsx:\n```typescript\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Abrazo West Trauma Center Resources',\n  description: 'Access resident guidelines, clinical practice guidelines, and trauma policies for Abrazo West Campus Level 1 Trauma Center.',\n  keywords: 'trauma center, medical resources, clinical guidelines, Abrazo West',\n  openGraph: {\n    title: 'Abrazo West Trauma Center Resources',\n    description: 'Professional resource portal for medical staff',\n    type: 'website',\n  },\n  robots: {\n    index: true,\n    follow: true,\n  },\n  viewport: {\n    width: 'device-width',\n    initialScale: 1,\n    maximumScale: 5,\n  },\n}\n```\n\n2. Implement caching strategy in data fetching:\n```typescript\n// Update getFiles function with revalidation\nexport const revalidate = 300 // Revalidate every 5 minutes\n\nasync function getFiles() {\n  const { data, error } = await supabase\n    .from('files')\n    .select('*')\n    .order('created_at', { ascending: false })\n\n  if (error) {\n    console.error('Error fetching files:', error)\n    return []\n  }\n\n  return data as FileRecord[]\n}\n```\n\n3. Add accessibility improvements:\n```typescript\n// Update FileCard.tsx with ARIA labels\nexport default function FileCard({ file }: FileCardProps) {\n  return (\n    <a\n      href={file.file_url}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"block p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow border border-neutral-light focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2\"\n      aria-label={`Download ${file.title} PDF document`}\n    >\n      <h3 className=\"text-lg font-semibold text-neutral-dark mb-2\">{file.title}</h3>\n      {file.description && (\n        <p className=\"text-sm text-gray-600 mb-2\">{file.description}</p>\n      )}\n      <div className=\"flex justify-between items-center text-xs text-gray-500\">\n        <span aria-label=\"File type\">PDF</span>\n        <time dateTime={file.created_at} aria-label=\"Upload date\">\n          {formatDate(file.created_at)}\n        </time>\n      </div>\n    </a>\n  )\n}\n```\n\n4. Add skip navigation link in layout:\n```typescript\n// In app/layout.tsx\n<body>\n  <a href=\"#main-content\" className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary text-white px-4 py-2 rounded\">\n    Skip to main content\n  </a>\n  <Header />\n  <main id=\"main-content\">\n    {children}\n  </main>\n  <Footer />\n</body>\n```\n\n5. Create robots.txt and sitemap.xml:\n```typescript\n// app/robots.txt/route.ts\nexport async function GET() {\n  return new Response(`User-agent: *\nAllow: /\nDisallow: /admin\nDisallow: /api\n\nSitemap: ${process.env.NEXT_PUBLIC_SITE_URL}/sitemap.xml`, {\n    headers: {\n      'Content-Type': 'text/plain',\n    },\n  })\n}\n```\n\n6. Add performance monitoring:\n```typescript\n// components/PerformanceMonitor.tsx\n'use client'\n\nimport { useEffect } from 'react'\n\nexport default function PerformanceMonitor() {\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      const observer = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          console.log(`${entry.name}: ${entry.duration}ms`)\n        })\n      })\n      \n      observer.observe({ entryTypes: ['navigation', 'resource'] })\n      \n      return () => observer.disconnect()\n    }\n  }, [])\n\n  return null\n}\n```",
        "testStrategy": "Run Lighthouse audits targeting 90+ scores. Test with screen readers (NVDA/JAWS). Verify keyboard navigation works throughout. Test on slow 3G connection. Validate HTML for accessibility compliance. Check color contrast ratios.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Deploy to Vercel and Create Documentation",
        "description": "Deploy the application to Vercel, configure environment variables, set up monitoring, and create comprehensive documentation for maintenance and future development.",
        "details": "1. Create comprehensive README.md:\n```markdown\n# Abrazo West Trauma Center Resources\n\nA professional web application providing medical staff with easy access to trauma center resources, guidelines, and policies.\n\n## Features\n\n- 📱 Mobile-first responsive design\n- 🔒 Secure admin portal for content management\n- 📄 PDF document management system\n- ⚡ Fast, server-side rendered pages\n- ♿ WCAG 2.1 AA compliant\n\n## Tech Stack\n\n- **Framework**: Next.js 14+ (App Router)\n- **Language**: TypeScript\n- **Styling**: Tailwind CSS\n- **Database**: Supabase (PostgreSQL)\n- **Storage**: Supabase Storage\n- **Deployment**: Vercel\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 18+\n- npm or yarn\n- Supabase account\n\n### Installation\n\n1. Clone the repository:\n\\`\\`\\`bash\ngit clone https://github.com/your-org/abrazo-west-trauma.git\ncd abrazo-west-trauma\n\\`\\`\\`\n\n2. Install dependencies:\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n3. Set up environment variables:\n\\`\\`\\`bash\ncp .env.example .env.local\n\\`\\`\\`\n\n4. Configure Supabase:\n   - Create a new project at supabase.com\n   - Run the SQL migrations in `/supabase/migrations`\n   - Copy your project URL and anon key to `.env.local`\n\n5. Run the development server:\n\\`\\`\\`bash\nnpm run dev\n\\`\\`\\`\n\n## Environment Variables\n\n\\`\\`\\`env\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\nADMIN_PASSWORD=your_secure_admin_password\nNEXT_PUBLIC_SITE_URL=https://your-domain.com\n\\`\\`\\`\n\n## Deployment\n\n### Vercel Deployment\n\n1. Push your code to GitHub\n2. Import project in Vercel\n3. Configure environment variables\n4. Deploy\n\n### Post-Deployment\n\n- Test all functionality\n- Monitor Core Web Vitals\n- Set up error tracking (optional)\n\n## Admin Guide\n\n### Accessing Admin Portal\n\n1. Navigate to `/admin`\n2. Enter the admin password\n3. Upload PDF files with appropriate metadata\n\n### File Management\n\n- **Supported formats**: PDF only\n- **Max file size**: 10MB\n- **Categories**: Resident Guidelines, CPGs, Trauma Policies, Resources\n\n## Development\n\n### Project Structure\n\n\\`\\`\\`\n/\n├── app/              # Next.js app directory\n├── components/       # Reusable React components\n├── lib/             # Utility functions and configs\n├── public/          # Static assets\n└── supabase/        # Database migrations\n\\`\\`\\`\n\n### Key Commands\n\n\\`\\`\\`bash\nnpm run dev          # Start development server\nnpm run build        # Build for production\nnpm run start        # Start production server\nnpm run lint         # Run ESLint\nnpm run type-check   # Run TypeScript compiler\n\\`\\`\\`\n\n## Maintenance\n\n### Regular Tasks\n\n- Review and update dependencies monthly\n- Monitor Supabase storage usage\n- Check error logs and performance metrics\n- Backup database regularly\n\n### Troubleshooting\n\n**File uploads failing**: Check Supabase storage bucket permissions\n**Auth issues**: Verify ADMIN_PASSWORD environment variable\n**Performance issues**: Review Vercel analytics and optimize\n\n## License\n\nProprietary - Abrazo West Campus\n\n## Support\n\nFor technical support, contact: [support email]\n\\`\\`\\`\n\n2. Create .env.example:\n\\`\\`\\`env\n# Supabase\nNEXT_PUBLIC_SUPABASE_URL=\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\n\n# Admin\nADMIN_PASSWORD=\n\n# Site\nNEXT_PUBLIC_SITE_URL=\n\\`\\`\\`\n\n3. Set up Vercel deployment:\n\\`\\`\\`bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Deploy\nvercel\n\n# Set environment variables\nvercel env add NEXT_PUBLIC_SUPABASE_URL\nvercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY\nvercel env add ADMIN_PASSWORD\n\\`\\`\\`\n\n4. Create deployment checklist:\n- [ ] All environment variables configured\n- [ ] Supabase RLS policies enabled\n- [ ] Admin password is secure\n- [ ] Custom domain configured\n- [ ] SSL certificate active\n- [ ] Analytics enabled\n- [ ] Error tracking configured\n- [ ] Performance monitoring active\n- [ ] Backup strategy in place\n\n5. Create CONTRIBUTING.md for future developers",
        "testStrategy": "Verify deployment succeeds on Vercel. Test all environment variables are properly set. Confirm custom domain works with SSL. Test the deployed app on various devices. Ensure documentation is clear and complete. Verify all links in documentation work.",
        "priority": "low",
        "dependencies": [
          9
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-29T05:37:02.701Z",
      "updated": "2025-08-29T06:30:25.860Z",
      "description": "Tasks for master context"
    }
  }
}